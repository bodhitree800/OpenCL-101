

__kernel void p(__global float *a) {
    const int idx = get_global_id(0);
    const int count = 1024;
    const float v = 1.3999445323257f;
    const float w = 0.00055445354f;
    float sum = 0.0;
    local float c[count];    

    // printf("global size %d, local size %d %d %d\n", get_global_size(0), get_local_size(0), idx, get_local_id(0));

    // float c[16] = {
    //     0.512323f, 
    //     0.743244323f, 
    //     0.643323234f, 
    //     0.7654665477f,
    //     0.554343436f,
    //     0.446646646f,
    //     0.328588758f,
    //     0.254543433f,
    //     0.164344343f,
    //     0.464346436f,
    //     0.512323f, 
    //     0.743244323f, 
    //     0.643323234f, 
    //     0.7654665477f,
    //     0.554343436f,
    //     0.446646646f,
    // };

    for(int i = 0; i < count; i++)
    {
        c[i] = 0.01 * i;
    }

    //     0.328588758f,
    //     0.254543433f,
    //     0.164344343f,
    //     0.464346436f,
    //     0.512323f, 
    //     0.743244323f, 
    //     0.643323234f, 
    //     0.7654665477f,
    //     0.554343436f,
    //     0.446646646f,
    //     0.328588758f,
    //     0.254543433f,
    //     0.164344343f,
    //     0.464346436f,

    //     0.512323f, 
    //     0.743244323f, 
    //     0.643323234f, 
    //     0.7654665477f,
    //     0.554343436f,
    //     0.446646646f,
    //     0.328588758f,
    //     0.254543433f,
    //     0.164344343f,
    //     0.464346436f,
    //     0.512323f, 
    //     0.743244323f, 
    //     0.643323234f, 
    //     0.7654665477f,
    //     0.554343436f,
    //     0.446646646f,
    //     0.328588758f,
    //     0.254543433f,
    //     0.164344343f,
    //     0.464346436f,

    // };

    // int i = 0;
    // for (i = 0; i < 1000; i++) {
    //     int j = 0;
    //     for(j = 0; j < 10; j++) {
            
    //         c[0] = fma(v, w, c[0]);
    //         int k;
    //         for(k = 0; k < count-1; k++)
    //         {
    //             c[k+1] = fma(c[k], w, c[k+1]);
    //             // c[k+1] = c[k] * w + c[k+1]);
    //         }           

    //     }
    // }

    // a[idx] = 0.0;
    int i = 0;
    for (i = 0; i < 1000; i++) {
        int j = 0;
        for(j = 0; j < 10; j++) {
            for(int k = 0; k < count; k++)
            {
                sum += v * c[k] + w ;
            }
        }
    }

            // printf("%f ", c[0]);

    a[idx] = sum;
}
